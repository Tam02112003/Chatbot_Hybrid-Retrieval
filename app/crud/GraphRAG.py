from app.pkgs.model import call_gemma3n_api
from app.pkgs.Neo4jManager import neo4j_graph


# -------- Tr√≠ch xu·∫•t th·ª±c th·ªÉ t·ª´ c√¢u h·ªèi
def extract_entity_from_question(question: str) -> str:
    prompt = f"""
T·ª´ c√¢u h·ªèi sau, tr√≠ch xu·∫•t **t√™n ƒë·ªëi t∆∞·ª£ng ch√≠nh** (v√≠ d·ª• t·ªï ch·ª©c, s·∫£n ph·∫©m, d·ªãch v·ª•,...)

V√≠ d·ª•:
C√¢u h·ªèi: "HDBank cung c·∫•p d·ªãch v·ª• g√¨?" ‚Üí HDBank
C√¢u h·ªèi: "D·ªãch v·ª• ki·ªÅu h·ªëi c√≥ nh·ªØng ∆∞u ƒë√£i n√†o?" ‚Üí D·ªãch v·ª• ki·ªÅu h·ªëi

C√¢u h·ªèi: "{question}"
ƒê·ªëi t∆∞·ª£ng:
""".strip()

    try:
        response = call_gemma3n_api(prompt).strip()
        return response
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói khi t√°ch entity: {e}")
        return ""

# -------- Truy v·∫•n quan h·ªá t·ª´ entity
def query_relations_from_entity(entity: str):
    cypher = f"""
    MATCH (e:Entity)-[r]->(o:Entity)
    WHERE toLower(e.name) CONTAINS '{entity.lower()}'
    RETURN e.name AS ChuNgu, type(r) AS QuanHe, o.name AS TanNgu
    LIMIT 50
    """
    try:
        return neo4j_graph.query(cypher)
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói Cypher: {e}")
        return []



# -------- Truy v·∫•n
def ask_question_with_graphrag(question: str):
    entity = extract_entity_from_question(question)
    if not entity:
        return "ü§ñ T√¥i kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c n·ªôi dung b·∫°n h·ªèi."

    results = query_relations_from_entity(entity)
    if not results:
        return f"ü§ñ Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu li√™n quan ƒë·∫øn: {entity}"

    rows = [f"- {r['ChuNgu']} {r['QuanHe']} {r['TanNgu']}" for r in results]

    prompt = f"""
Ng∆∞·ªùi d√πng h·ªèi: "{question}"

T√¥i thu ƒë∆∞·ª£c c√°c th√¥ng tin sau:
{chr(10).join(rows)}

N·∫øu trong ƒë√≥ c√≥ ƒë∆∞·ªùng link tr√πng nhau th√¨ ch·ªâ gi·ªØ m·ªôt

H√£y tr·∫£ l·ªùi m·ªôt c√°ch th√¢n thi·ªán nh∆∞ m·ªôt tr·ª£ l√Ω ·∫£o c·ªßa c√¥ng ty HDBank.
"""
    try:
        return "üí¨ " + call_gemma3n_api(prompt).strip()
    except:
        return "\n".join(rows)

